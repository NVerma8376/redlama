[
  {
    "title": "FASTEST Way to Learn Coding and ACTUALLY Get a Job",
    "video_id": "79pKwdiqcwI",
    "url": "https://www.youtube.com/watch?v=79pKwdiqcwI",
    "views": 6905802,
    "transcript": "From the day I wrote my first Hello World program, \nit took me 2 years to land a job at Amazon and   another 2 years to get into Google. That’s because \nI did all this with no Computer Science degree or   bootcamp. I made countless mistakes along the \nway which made my path to become a Software   Engineer longer than it should have been. \nI watched countless Youtube tutorials, paid   for numerous Udemy courses and spent hundreds of \nhours learning things that didn’t add any value.   If I could go back in time and undo \nall the things that don’t work,   I would be in the exact same situation as \ntoday within 6 months of starting programming.   That’s exactly why I made this video. Today, \nI'll remove all the useless fluff and give   you the fastest path to go from a beginner to \na full-time Software Engineer.  Before I begin, there are 3 major mistakes that \ncan slow down your progress to become a full-time   Software Engineer. I will also share these 3 \nmistakes along the way. So, stay tuned for that. As a new programmer, the first decision you \nneed to make is “Which programming language to   learn?”. To answer that question, let’s talk about what \na beginner wants from a programming language.   Number 1, The language should be easy and \nintuitive to write. It should not require   learning very complex syntax. It should be \nas close as possible to writing in English.   Next, The programming language should be versatile \nand have many applications. As a beginner,   you don’t want to learn a new language for every \nnew project you want to build. In other words,   the language should have great returns \nfor the time you invest on learning it.   Lastly, the programming language should be \nfast to write. You shouldn’t have to waste time   spelling out the declaration of a new variable or \nsimple iteration through a list. In other words,   it should be concise and get the job done in \nminimum lines of code. As some of you might have   already guessed it, Python is the language that \nsolves all these problems. It’s almost   as easy as writing in English. It has so many \ndifferent applications like Web development, Data   Science and Automation. Python is extremely fast to write when compared with other popular languages.  That's because it requires less lines of code for the  same amount of code. As an example, here is the same code \nwritten in Java vs Python. For me personally, I started   out with learning Java. I used to do all my coding \ninterviews in Java. Recently, I switched to using  Python and it improved my interview performance \nby at least 2 times because it’s so fast to write.   Having said that, Java and other popular \nlanguages have their own advantages and you will   have to learn another language at some point \nin your career. But   I do believe that Python would be \nthe best language to start with. Now that we know we should learn Python, let’s \ntalk about how to do it. And this is where most   new programmers make the first major mistake that \nslows them down. The mistake most beginners make   is that they learn by watching others code. Let \nme explain this by telling you how most people   learn programming. Most newbies would go to a \ncourse provider like Udemy and look up for Python   courses. Then they pick one of these 20+ hours \ncourses thinking that these courses are long and   detailed and hence good for them. And then they \nnever end up finishing the course. That’s because   20 hours of content is not the same as 20 hours \nof great content. Some people will go to Youtube   and watch someone else code without ever writing \nany code themselves. And watching these tutorials   gives them a false sense of progress. That’s \nbecause coding in your head is very different   from actually writing down the code and debugging \nthe errors. So, what is the right way to do it?   The answer is very simple, you should Learn by \nCoding. For this, you can go to this free website   called learnpython.org. On this website, just \nfocus on the basic lessons for Python and don’t   worry about Data Science tutorials or any Advanced \ntutorials. That's because even if you   learn advanced concepts right now, you would not \nbe able to remember them until you have actually   applied them on a real world problem. You can \nalways come back to learn the advanced concepts in   the future when you need them for your projects. \nIf you look at a lesson, each lesson first explains a basic concept   and then asks you to apply those concepts to a \nproblem. Feel free to play with the sample code.   Think about other problems you can solve with \nconcepts you just learnt and try to solve them   in the exercise portion. Once you’re done with the \nbasics, you’re good to move on to the next steps. In the spirit of learning by coding, we would do \nsome projects in Python next. In the beginning,   it’s very hard to do something on your own. \nSo, we’ll take the help of experts. So,   go to Youtube and look up this video called “12 \nbeginner Python projects” by freecodecamp.org,   which by the way is a great \nchannel to follow. In this video,   they build 12 beginner Python projects from \nscratch. These projects include building Madlibs,   Tic Tac toe, Minesweeper etc. and all of them \nare very interesting. They walk you through   the implementation of all these projects step \nby step making it very easy to follow. But,   before you start watching this tutorial, there \nare 2 things you should know. One, You should   not watch this tutorial casually. Follow along if \nyou really want to learn programming and become a   Software Engineer. To follow along, you would \nneed something called Integrated Development   Environment or IDE to build these projects. IDE \nin simplest terms is an application where you can   write and run your code. There are several popular \nIDEs for Python. This tutorial uses VS code. So,   you might want to download VS code and set it \nup for Python before starting on this tutorial. Once you have completed this tutorial, you \nare ready to work on your own projects.   Working on building your own projects will \nhelp you in multiple ways. Number one,   it will introduce you to how Software Engineers \nwork in the real world. You will write code that   will fail and you’ll debug it and repeat it \nover and over again. This is exactly what   a day in the life of a Software Engineer looks \nlike. Number two, you will build a portfolio   of projects by doing this. You can host your \ncode on Github and put the link in your resume.   This will help you attract recruiters and get \nyour resume shortlisted. Lastly, building your   own projects will give you confidence that you \nare ready to tackle new challenges as a Software   Engineer. But, what kind of projects should you work on?  You can think of any projects that you \nfind interesting but here are some examples I found. You can build a Web crawler, or an Alarm clock, or maybe an app that gives you Wikipedia article of the day.  Some example projects that   I built were a Spam filter, an Algorithmic \nTrading engine and an e-commerce website. Now you have a great resume and you are \nconfident about your programming skills.   Let’s start applying for Software Engineer \npositions. Wait a second. This is actually the second   major mistake new programmers make.  You see, in an ideal world, having good programming skills and a great resume is all you should need to   become a Software Engineer. But unfortunately for us, tech companies like to play games with   us in the interviews. They ask you specific kinds \nof programming questions in the interviews. If you   don’t prepare for these questions, you might not \nget the expected results. So,   let’s see how to prepare for interviews. All the \ninterviews are based on this one course that is   taught to all Computer Science graduates. This \ncourse is called Data Structures and Algorithms.   Fortunately for us, Google has created this course \nand made it available for free on Udacity. And the   best part is that this course is taught in \nPython. In this four week course, you’ll learn   about different algorithms related to searching \nand sorting. You’ll learn about data structures   like maps, trees and graphs. Don’t worry if you \ndon’t know any of these terms right now. I am   sure that by the end of this course, you’ll be \na pro. For that just keep 2 things in mind . One,   be regular and finish this course. As I mentioned \nearlier, most people start courses and never   finish them. So, make sure you take small steps \neveryday and make regular progress. Two,   make sure you complete all the exercises they give \nin this course. As I have already said many times,   the only way to learn coding is by doing. So, \nimplement the algorithms by yourself if you can   and finish all the assignments. Trust me when \nI say this. When it comes to interviewing for   entry level jobs, this course is the only \ndifference between you and someone who dropped   more than a hundred thousand dollars on a computer \nscience degree. So, if you finish this course,   you’ll be pretty much on par with someone \nwho has a CS degree when you interview. After completing this course on Data Structures \nand Algorithms, you have all the foundational   knowledge you need to tackle the interviews. In \norder to sharpen your interview skills further,   you need to practice some questions that have been \nasked by tech companies in the past. For that,   you should use a website called Leetcode. On \nleetcode, you will get interview style questions.   You can write your code and test your solution \nright there on the website. Leetcode is great for   beginners because all the questions are tagged \neasy, medium or hard based on difficulty level.   If you buy a premium subscription of the website, \nyou can also filter the questions by the tech   company that asked them in the past interviews.\nYou should start with easy questions and keep   working on them until you can solve them in \n45 minutes. Once that happens, you can move   on to medium questions.When you start solving \nmediums in 45 minutes, you can start applying   for Software Engineering jobs. If you are lucky, \nyou will get the job right away. For most people,   it will be a process full of disappointment \nand rejections. And this is where they   make the third and the biggest mistake of all, \nThey quit. The main reason people give up early   is because they overthink and complicate the \ninterview process. After every rejection,   they replay the interview over and over in their \nhead to figure out why they failed and take every   rejection personally. To avoid this, stay inside \nyour circle of control and try to influence the   outcome of your interviews but never get tangled \nin the things you can’t control. In other words,   do your best to crack the interviews but try to \nbe detached from the outcome of the interviews. If   you want to learn about how I became a Software \nEngineer without a Computer Science degree,   watch this video at the top. If you \nwant to see my 5 year coding journey in 5 minutes,   you can watch this other video. \nI will see you in the next one."
  },
  {
    "title": "Do THIS instead of watching endless tutorials - how I’d learn Python FAST…",
    "video_id": "mB0EBW-vDSQ",
    "url": "https://www.youtube.com/watch?v=mB0EBW-vDSQ",
    "views": 32553,
    "transcript": "Today we're talking about learning Python efficiently. Not the endless tutorial cycle that keeps you stuck, but an actual strategy that works. Now look, tutorials are great, but we all know about tutorial hell. And even though that's a majority of what I provide on this channel, I don't want to see you get stuck there. Now, first, let's quickly cover why Python is worth your time, and then we'll get into the strategy for learning it. Now, first, it's versatile. From web development to AI, data science or automation, Python works for a variety of tasks. Number two is that it consistently ranks in the top three programming languages for job demand. Number three, the salary is quite high. The average Python developer salary is around 100k in the United States. And number four is that it's perfect for both professional work and personal projects or hobbyists. Now, Python is great, but here's the problem. Most people learn Python watching video after video without making real progress. So, I want to break down how you can fix that. Now, overall, my main advice is to spend 20% of your time consuming and 80% of your time actually writing code. That's it. That's the secret. It's simple, but it's not easy. Note that distinction there. Simple, but not easy. Now, here's the exact process that I would follow if I was starting over to learn Python efficiently. Now, step number one is to master the basics quickly. This should take you one to two weeks maximum. Now, especially in the world of AI, mastering the basics can be done pretty quickly. Now, I'm not talking about every single built-in function here, but just enough for you to be able to solve some basic problems. So, pick one resource, yes, just one to learn the basics. Variables, data types, loops, functions, basic object-oriented programming. That's it. Don't spend months here. just get enough knowledge to start building something and then the rest you're going to learn on the fly. Now, personally, I'd recommend that you pick either a short course that focuses on practical examples that can be from YouTube like videos from my channel or even a paid program, something like a Udemy course, or you look at something like Python's official documentation. Now, of course, everyone learns differently and there's so many options, but I find when you're just starting out that videos are super useful because you really do need things broken down more slowly and you can learn a lot when you're listening to someone who's experienced rather than reading through something like a book, for example, where you might miss the emphasis or some of the important points. Now, while you learn this syntax, make sure that you're doing this by giving yourself mini challenges alongside the tutorials that you're following. Try to predict what code will do before you run it. Guess what the instructor is going to do next. Code alongside and mess with the code. Try to break it. The more interactive, the more you're going to learn. And this leads me to step number two, which is interactive learning. Now, you need to spend a few weeks here learning and developing your skills in an interactive way. Most important point here, again, 20% watching and 80% doing. In fact, research shows that when you just passively watch tutorials or read articles, you only retain about 20% of the information. But with active learning, when you're actually coding and building projects as you learn, you can retain 75 to 90% of what you study. And personally, I found that true for myself. Now, honestly, that's why I recommend Data Camp when you first start with Python because the platform is super interactive and it lets you code right inside of their environment, getting instant feedback as you go. Now, Data Camp is sponsoring this video and I'm excited to tell you about their two Python learning tracks because they're genuinely something I wish I had when I was getting started many years ago. Now, I've used Data Camp myself and I've been recommending it for a while, many videos on this channel. And if you're just getting started, I'd highly recommend the Python programming fundamentals track, which is designed to teach you the basics from variables, functions, and all the way up to working with data, which is exactly what I said before. And if you're looking to push things to the next level and get job ready as a Python developer, they also have the associate Python developer track, which dives deeper into real world skills like working with APIs, data structures, and debugging. Now, both tracks are hands-on, project-driven, and designed to actually help you practice, not just passively, but interactively learning. And right now, Data Camp is offering 25% off using my link in the description. So, if you're serious about learning Python the right way, don't miss out. Now, once you've mastered the syntax and you have some confidence, the next step is to pick a niche. Honestly, this is where most people fail. they keep watching general Python videos instead of diving deeper into a specific area. Now, you need to choose one area to focus on and I'm going to give you a few examples here. So, first could be web development with something like Django, Flask or Fast API. Next, you could do game development with something like Pygame. Then you have data analysis with something like Pandas or NumPy. You could do machine learning with TensorFlow or PyTorch. You could work with AI agents using something like Langchain or Langraph. or you could build automation scripts for your daily tasks. Lastly, you could even do hardware projects with something like Raspberry Pi. Then once you've picked a niche, you need to complete a project in that area. When you get stuck, look up solutions to specific problems, not just general Python tutorials. For example, if you're making a Django site and you can't figure out the authentication, search for that specific issue rather than watching a three-hour Django tutorial video. This is honestly where you're going to learn the most and where I personally saw most of my success when I was getting into programming. You pick a niche, you get really excited about a specific project, something you actually want to work on, and then you learn all of the skills that you need to get that project to completion. So, please pick a niche, pick a project you want to work on, and actually finish it. Doing this forces you to learn so much more than simply following along with tutorials. And while those tutorials can help you, most of the learning happens when you're struggling, failing, and constantly having to look up solutions on your own. Now, personally, I actually started learning Python by working with Pygame, a 2D graphics library. And you can see many examples on this channel, especially many years ago when I was doing Pygame tutorials. But honestly, you can pick anything that interests you. The most important thing is just to make sure that you stick with it. Okay. So, at this point, you've learned the syntax, you've practiced interactively, you've dove into a niche, and now it's time to become Pythonic. That's step number four. Now, here's the time to level up and learn what makes Python code elegant, and efficient. This is where you're going to transition from writing code that just works to writing code that's clean, efficient, and distinctly Python. Now, let's talk about some specific Python features that separate beginners from intermediates that you're definitely going to want to learn, especially if you really want to get into Python. Now the first is list comprehensions. So instead of writing this, you can write this. It's not just shorter, it's actually faster and more memory efficient in many cases and it's very popular in Python code. Next we have generator expressions. When dealing with large data sets, this is crucial and it can save you a lot of time and a lot of memory. Next, context managers. The width statement can handle resource cleanup automatically and it's something important to understand. Then we have dictionary and set operations. These are extremely valuable to learn and I find they're heavily underused in Python code considering what they can do. Next, we have decorators. These let you modify functions without changing their code and they show up in a ton of Python frameworks. Then we have things like typins for larger projects. These are super important and they can make your code a lot more maintainable. The key point here is that Python has a ton of unique features that the reasons people love or hate using the language. So spend some time, dive into these, and learn about the more advanced and pythonic features. I obviously didn't cover all of them in this video. I'm just giving you a few examples so you get an idea of what I mean. All right, so now let's move on to step number five, which is to keep building and keep shipping. Now, this is where most programmers plateau. They learn the basics, but they never develop the habit of finishing projects. Typically, the developers who progress the fastest are those who constantly ship and actually complete their work. Now, let me break down what I mean by shipping. This means using version control properly. Create a GitHub account if you don't already have one. Learn the basics of Git. Understand how to commit, push, pull, set up branches, write meaningful commit messages, structure your repositories professionally, and then go ahead and deploy your applications. For web apps, learn to use something like Heroku, Railway, or Render. For data projects, you can create sharable notebooks on Google Collab or something like Kaggle. For utilities, you can package them properly with setup tools. And for web services, you can learn Docker and containerize them. Honestly, there's all kinds of way to deploy your applications. It's obviously hard to cover all of that in this video, but the point is you actually want to push this out into the wild and most importantly finish the project. I know so many developers that have hundreds of half-finish projects. Honestly, that happened to me a lot when I was starting out. You don't want to be one of those. And that's because the habit of finishing projects compounds over time. Each completed project builds your practical problem-solving skills, increases your confidence, adds to your portfolio, and most importantly teaches you how to work through the boring parts of coding, which is what most developers do every single day. Now, one professionallook, fully completed project is worth a lot more than a dozen half-finish tutorials. And the best developers that I know all share this trait. They finish what they start. Now, remember, your goal here isn't to be good at Python tutorials. It's to be good at building things with Python. That's the point of coding. Now, here are my final thoughts for this video. If you're 6 months into learning Python and you haven't built anything substantial yet, then you're doing it wrong. The pattern is simple. Learn a little bit, build something, get stuck, learn what you need to learn to fix that, and repeat. That's how the real skills are built. Now, if you found this helpful, hit the subscribe button, like this video, and let me know what you think in the comments down below. I want to hear what you guys are building, how you're learning Python, and maybe anything that you're struggling with, and I might make another video for you. Anyways, I hope you guys enjoyed, and I look forward to seeing you in the next one. [Music]"
  },
  {
    "title": "#1 Python Tutorial for Beginners | Introduction to Python",
    "video_id": "hEgO047GxaQ",
    "url": "https://www.youtube.com/watch?v=hEgO047GxaQ",
    "views": 5627563,
    "transcript": "welcome back aliens my name is Naveen ready and finally we are starting with a series on Python or Python it doesn't matter how you pronounce it what matters is it is one of the fastest-growing language in what terms in terms of number of developers who are using it in terms of the number of libraries we have in terms of number of companies who are using it and in terms of the areas you can implement it you talk about machine learning you talk about GUI software development web development you can use it everywhere and that's why it is also called as a general-purpose language so in this video we will talk about what is Python and why it is so useful and why you should learn it so what is Python as I mentioned python is a programming language of course but it is also interpreted object-oriented and high-level language now does it means you cannot do procedures here you can it it also supports procedural read programming as well as object-oriented it depend upon your purpose right you can use it the way you want but why methods of famers we have C C++ Java JavaScript and still pythons famous now some people say that pythons a new language and not exactly Java came into picture in 1995 and Python came in 1989 so it's way before Java right now so when Java came into picture the enterprise market you know the everyone started using Java but then I think python was there you know it was there for other people to use example let's say if you want to learn a language for the first time Putnam was there but now since the advancement of machine learning AI this is a field where we have research scientists they don't want to spend much time on learning programming language so what they do they they wait for the easiest language available and the easiest language available in the market is Python and yes python is damn easy it is much simpler than C C++ and Java that's why most of the colleges and schools they are teaching Python you might be thinking which company uses Python now it just leaves those small small companies who uses Python we have Google we have YouTube we have Dropbox so we can see we have all these companies who are using Python as a main language or as a support language example let's say Google has so many features some those features is coding ADA in Python not in the same way we have this one of the big website called as reddit reddit is today return in Python now let's focus on this name Python in fact when you talk about C C++ Java this names they have some story right what about Python is just because this language looks like a snake not exactly the author of Python he's a big fan of a British comedy movie called as Monty Python's Flying Circus and that's why he went with a name called as Python initially and then when everyone wanted everyone liked it he went for the same name now can they learn Python and the answer is yes it is one of the easiest language to learn and even if you are from a non-technical background you have not written any code you can start with Python what if I say Python came into picture just to help those people who don't know how to read a code in fact children can learn Python is that easy now Python has multiple versions we have one point X we have two point X and we have three point X and of course we should be learning three point X right that means two point X is not in there in the market and the answer is no the mark the two point X is still in the market because when three point X came into picture it was very different from two point X normally what happens in programming language you know when Java eight came into picture so it was backward compatible with Java 1.7 when jawan 1.7 came into picture it was backward compatible with 1.6 but that's not the case with Python you know the two different versions has two different a way of working and that's why we have two point X still running in the market and it does have a support till 2020 so which one you should learn of course three point X right because it is new and there will be lot of features which you can work on so that's the introduction from this video in the next video we'll talk about how to install Python how to work with different stuff and then in the entire series you will enjoy this language so I hope you will be watching this series let me know in the comments section and do clean like but if you're enjoying it thanks for watching everyone buh bye"
  },
  {
    "title": "Python OOP Tutorial 1: Classes and Instances",
    "video_id": "ZDa-Z5JzLYM",
    "url": "https://www.youtube.com/watch?v=ZDa-Z5JzLYM",
    "views": 4708284,
    "transcript": "Hey, everybody. How's [it] going in this series of videos? We'll be learning how to create and use classes within python and how object-oriented concepts are applied within the language now There's a lot to cover when working with classes, so I'm going to break these up into several different videos We'll cover the basics of creating and instantiating classes will learn about inheritance class and instance variables static methods and class methods and Several other topics So breaking these up in several videos will allow us to focus on specific topics in each video so in this video We'll be learning the basics of creating and instantiating simple classes, but first Why should we even use classes now this isn't just specific to Python you can see classes being used throughout most modern programming languages, and there's a good reason for that they allow us to Logically group our data and functions in a way that's easy to [reuse] and also easy to build upon if need be Now just a quick side note when I say data and functions that are associated with a specific class We call those attributes and methods, and you'll hear me use those terms a lot throughout these videos, so when I say methods I mean a function that is associated with a class [so] let's go ahead and get started so say we had an application for our company And we wanted to [represent] our employees and our python code now This would be a great use case for a class because each individual employee is going to have specific Attributes and methods so for example each employee is going to have a name and email address [a] pay and also Actions that they can perform so it'd be nice if we had a class That we could use as a blueprint to create each employee so that we didn't have to do this manually each time from scratch So let's go ahead and create a simple employee class and see what that would look like so to create a class It's just as easy as saying class employee now I'm going to leave this empty for now, and if we just left it like this and we get an error so if you ever have a class or a function [that] you want to leave empty for the time being then you can simply put In a past statement and python will know that you just want to skip that for now So now we have a simple employee class with no attributes or methods And I wanted to stop here because I wanted to explain the difference between a class and an instance of a class So our class is basically a blueprint for creating Instances and each unique employee that we create using our employee class will be an instance of that class so for example if I said employee 1 equals employee and EmPLoyee 2 Equals employee then each of these are [going] to be their own unique instances of the employee class so for example if I go ahead and print both of these out and Copy and paste that There and you can see that both of these are employee objects, and they're both unique They both have different locations here in memory now This is an important distinction because you'll hear me talk a lot about instance variables and class variables and it's important to know the difference between those and I'll go more in depth into class variables in the next video but for this video We're going to be looking at instance variables so instance variables contain Data that is unique to each instance Now we could manually create instance variables for each employee by doing something like this So let's say we wanted employee 1 to have a first name and a last name so I could just do employee 1 not first Equals Corey and then I could do employee last is equal to Schaefer and I could also give it an email address, so I'll do employee 1 dot email equals and I'll just do the first name with the last name at Company comm and lastly let's go ahead and add a pay [onto] there too, so I'll do employee 1 not pay and we'll just do 50,000 there now let's give employee to Some of these same attributes so for this one. I'll just do test User and then I'll do test User and I will make that 60,000 ok so now each of these instances have attributes that are unique to them so if I print it out, let's say I could print out the employee [1] dot mail and Also print out the employee to email On it looks like whenever I gave these the instance variables I forgot to make this employee to here so now let's run that so now you can see that that email Was created for each employee? [let's] say that we wanted to set all of this information for each employee When they're created rather than doing all of this manually like we did here So we wouldn't want to have to Manually set these variables every time you can see it's a lot of code and it's also prone to mistakes Just like I did whenever I forgot to change the [to] employee, [too] So we don't get much benefit of using classes if we did it this way, so to make these Set up automatically when we create the employee we're going to use a special init method So now inside of our employee class I'm going to create this special init method Now you can think of this method as initialize and if you're coming from another language Then you can think of this as the constructor now when we create methods within a class they [receive] the instance as the first argument Automatically and by convention. We should call the instance self now. You can call it Whatever you want But it's a good idea to stick to convention here and just use self So after self we can specify what other arguments that we want to Accept so let's go ahead and accept the first name the [last] name and the pay and I know that we had email, too But we can create the email using the first name and the last name so now within our and Knit method We're going to set all of these instance variables So let's do self dot first equals first and now I'm just going to do this for the rest of them as well So [I'm] going to do self dot pay or self dot last and self dot pay and for the email I can do self dot email equals first plus and then we'll put a dot between those and then last and then we'll add on to the end at company comm Okay, so whenever I say that self is the instance what I mean by [that] is that when we self dot first? equals [two] first here It's going to be the same thing as us saying down here that employee one dot first equals [Korey] except now instead of doing this manually It'll be done automatically when we create our employee objects Now these don't need to be the same as our arguments so for example. I could make this Self dot f name equals first, but I usually like to keep these similar if possible So I'm going to go ahead and set that back [to] self dot first equals first, okay? So now when we create our instances of our employee class right here now we can pass in the values that we specified in our anit method now our net method takes the instance which we call itself and the first name last name and Pay as arguments, but when we create our employee down here the instance is passed automatically So we can leave off self we only need to provide the names and the pay so we could create these by Passing in first and we have to do this in order So I will pass in all of the same information that we did manually down there and for the second one I'll do [test] and User and I think I had that at [sixty] [thousand] okay so what would happen on this line when we create this employee the anit method will [be] run automatically, so Employee one will be passed in as self and then it will set all [of] these attributes So it'll set employee one dot first is equal to first which we passed in as quarry Employee one that last equals what we passed in is last and so on so now that we have that an it method in place We can go [ahead] and delete these manual assignments that we made down here And you can see by deleting that that we got rid of a lot of code So I'm going to go ahead and comment out those lines [we're] printing [the] employees, and I'm just going [to] go ahead and print out the email So if I run that then you can see that that still works, okay? So everything that we have so far [like] the names and email and the pay are all attributes of our class now Let's say that we wanted the ability to perform some kind of action not to do that We can add some methods to our class So let's say [that] I wanted the ability to display the full name of an employee now This is an action that you'd likely need to do a lot with a class like this So we can do this manually outside the class if I was to come down here and do Print and I could get the full name just by putting in two placeholders there and doing a format and saying employee one dot first and Employee one dot last and if I go ahead and print this out And you can see that we got the full name there But that's a lot to type in each time that you want to display the employees full name, [so] instead Let's create a method within our class that allows us to put this functionality in one place, so within our class here I'm going to create a method called full name and we can do that with just doing a death of Full name now [like] I said before each method within a class Automatically takes the instance as the first argument and We're going to always call [that] self and the instance is the only argument that we'll need in order to get the full name So within this method here I'm just going [to] take the same logic that we had down here and cut that out and I'm just going to go ahead and return that but we have to be careful here because now instead of printing Employee [1] [first-name] and [lastname], [I'm] going to use self so that it will work [with] all instances So I'm going to do self dot first and self dot last So now that we created that method instead of printing like we did before now I can just come down [here] and do employee 1 dot full name and Print that out And if I run that then you can see that we got the same [thing] and notice that we need the parentheses here Because this is a method instead of an attribute So if I left the parentheses off and printed this then you can see that it prints the method instead [of] the return value of the method so we're going to have to put those parentheses on in order to run that properly so now we have full advantage of Code reviews here, so instead of typing this out for each full name that I want to print now I can just use that method so now if I wanted to print employee two's full name It's just as easy as replacing employee one with employee two and running that and we get the correct answer Okay, and one more quick thing that I wanted [to] point out here Now one common mistake that I see when creating methods is forgetting the self argument for the instance So let's take a quick look at what that would look like if we left that off so now before I run this if I just comment it out this printing of full name down here and Ran this then you can see I'm actually going to remove these print statements here as well Now [you] can see that this runs without any errors But if I was to try to run this method that we accidentally left self off of then Run this and you can see that we get an error and the error that we got was a type error full-name takes zero positional arguments But one was given now this can be confusing because it doesn't look like we're passing any arguments here into full name But the instance which in this case is employee two is getting passed automatically So we have to expect that instance argument in our method, and that's why we added self so I'm going to come back up [here] to full name and Put self back in and now running this you can see that [it] runs Correctly now we can also run these methods using the class name Itself which makes it a bit more obvious of what's going on in the background because whenever we do that, so I'll do employee Dot full name now [when] we run it from the class we have to manually pass in the instance as an argument So in this case I'll pass in employee one so you can see how these are similar, but not exactly the same So I'm going to put these side-by-side just so that we can compare them here So these two lines here do the exact [same] thing, but here when I do employee one Which is a instance and I call the method. I don't need to pass in self It does it automatically and when we call the method on the class And it doesn't know what? instance that we want to run that method with so we do have to pass in the instance and that gets passed in as self and if I go [ahead] and Print this out and run it then you can see that it works Just like if we were to print out the employee one dot full name And I wanted to show you that because that's actually what's going on in the background when we run employee one dot full name it gets transformed into this here employee dot full name and Passes in employee one as self and that's why we have self for these methods, so I hope that makes sense to you That's not extremely important to know when we're just getting started with working with classes But we need to understand that [in] later videos once we start inheriting from other classes and things like that So I figured it would be a good thing to go ahead, and show you that now okay? So I think that's going to do it for this video in this video We learned how to create simple classes the difference between a class and an instance of that class and we also learned how to initialize class attributes and create methods now We still have a lot to cover in future videos, and we'll be going over more advanced topics, so in the next video We'll learn about class variables, and how they differ from instance variables that we saw here But if you do have any [questions] with what we covered in this video Then feel free to ask in the comment section [below] and I'll do my best to answer those If you enjoy these tutorials and would like to support them then there are several ways you can do that The easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with Anyone who you [think] would find them useful and if you have the means you can contribute through patreon And there's a link to that page in [its] scription section below be sure to subscribe for future videos and thank you all for [watching]"
  },
  {
    "title": "Python Tutorial in 30 Minutes (Crash Course for Absolute Beginners)",
    "video_id": "WEm3EUdicDg",
    "url": "https://www.youtube.com/watch?v=WEm3EUdicDg",
    "views": 166953,
    "transcript": "hi there and welcome to my python crash course on the new boston channel in this tutorial we'll be looking at the different types of syntax assigning variables looking at the different data types using numbers strings different boolean values operators different kinds of loops functions classes and even objects now for the stuff that i've just said made no sense to you then i challenge you to watch till the end of the tutorial and i assure you that by the end you'll have a great understanding of all of these topics [Music] also as you can probably imagine i put a lot of work and effort into making this tutorial it mean the world to me if you go ahead and subscribe to my channel it should be the first link in the description thanks so much for that and let's get right into it so let's start off with looking at comments now comments can be used to explain python code and they can also be used to make code more readable now comment always starts with a hash and python will ignore them whenever you try to run the script comments can be placed at either the tsar or the end of the line a comment does not have to be text to explain the code it can also be used to prevent python from just executing that bit of code now maybe you don't just want one line for a comment and you want multiple so instead of using this you could use triple quotes in your code as long as the string is not assigned to a variable python will read the code but then ignore it let's now have a look at how you can create a variable a variable is created the moment that you first assign a value to it for example here i'm going to say x equals to 10. so x is going to be the variable and 10 is going to be the value now if you go ahead and print out x it should respond with 10. now as i said earlier we can use variables to assign any type of data whether that be a number or even a word so let's go ahead and make a new variable and we're going to assign it to the string coding now if you go ahead and print out y this is the result that we get now that you know how to create a variable let's have a look at how you can change the type even after the type has been set now changing a type is as simple as making something from an integer to string or string to an integer if you want to specify the data type of a variable this can be done with casting so if you go ahead and say x equals a string and in brackets 10 then x will be 10 but in quotations and hence it will print out as a string now we can also go ahead and say y equals to the integer 3. now y will be 3 without any quotation in addition to that we can also say the z equals to flow in practice three all this does is it adds a decimal place to the end of three and hence the result three point zero let's now have a look at single or double quotes string variables can be declared either by using a single quote or a double let's have a look at what the difference is so if you go ahead and say x equals coding in double quotes and then we also go ahead and say y equals the coding in single quotations the output that we get here is actually going to be the exact same another key thing to take into consideration is the variable names are case sensitive for this one we're going to have a capital a and we're going to assign this value to python and now we're going to have a small a right below it and we're going to assign the value to variables let's now go ahead and print both of these out to see what we get as you can see here we get two different results this is because the capital a will not override the other let's now go ahead and look at data types now there are a lot of different types of built-in data types in programming data type is a very important concept variables can sort data of different types hence data types some of the data types are built into python are scr or string for text int or integer and flow for numeric types list tuple and range for sequence types as well as bool for brain types we'll be having a look at most of these in a bit more detail in just a second let's have a look at how you can get the data type so if you don't remember getting a data type can be done by using the type function here i'm going to go ahead and say x equals five i'm gonna go ahead and print out type x as you can see it tells us that x is an integer let's now have a look at numbers so there are two main numeric types in python int or integer and float variables of numeric types are created when you first assign a value to variables of numeric types are created when you assign a value to them now let's go ahead and say x equals 1 and y equals to 2.8 if you go ahead and print out the type for both x and y it tells us that x is an integer and y is a float int or integer is basically a whole number it can be positive or negative but it cannot have any decimals float on the other hand is a floating point number and it can be either positive or negative but it has to contain either one or more decimals let's now have a look at strings now strings in python are surrounded by angle quotations or double quotation marks hello in single quotation is the same as hello in double and you can display a string literal with the print function you can also assign a multi-aligned string to a variable by using three quotes as i showed you earlier we can also use three codes for making multi-line comments however when it's connected to a variable it's a value let's go ahead and just say a equals triple quote and some sample text in multi-lines as you can see when we print this out it prints out more than one line now again it doesn't matter if you use three single quotes or three double quotes they both still do output the same result like many other programming languages strings in python are arrays of bytes representing unicode characters however python doesn't actually have a character data type it's simply a string with a length of one square brackets can be used to access the elements of a string so we're going to go ahead and say a equals to hello world and we're going to go ahead and print out a then after the a we're gonna add in square brackets and say one in the middle now before i print this out try and have a go yourself to see what you get as you can see here it prints out the e that's because the first character actually has a position of zero and not one so if we did the same thing with zero instead of one then it would print out h instead you can also get the length of a string by using the len function to try this out we're gonna carry on with our example with a being hello world what we're gonna do is go ahead and say print then and then a in the middle this should go ahead and print out the length of the string in this case that's going to be 13. in let's now have a look at booleans in python number lines represent one or two values true or false in programming you often need to know if an expression is true or false now evaluating any expression in python will get you one of these two answers let's go ahead and compare two values python will return the boolean answer so let's go ahead and say print 10 is greater than 9 10 equals to 9 and 10 is smaller than 9 and the result that we get should be in this order 2 false and false because 10 is greater than 9 however the next two after that are false when you try and run a condition in an if statement python will again return either true or false we're going to go ahead and say a equals to 100 and b equals to 50. let's also say that if b is greater than a then print b is greater than a else print out b is not greater than a now if you don't really know how if or else statements work don't worry because we'll get onto that in just a second now the ball function actually allows you to evaluate any value it also gives you true or false in return for example let's go ahead and say print bull hello and we'll also say print bool 15. as you can see we got two outputs and they're both true because they're both valid statements now almost any value is evaluated to true it has some sort of content any string is true except for empty strings and any number is true except for zero any list tuple or even sets or all through except for the ones that have nothing in them so again we're going to go ahead and say bool and then we're going to say abc bool123 and bull a list of apple cherry and banana now we haven't really looked the list yet but we'll be looking at that in a second anyways the output here should all be true even though a lot of the values are true some are still false in fact there's really not that many values they value to false except for empty values the number zero and even the value of none and of course the value false also evaluates to false to have a look at all of this let's say ball false ball none bull zero ball quotations with nothing inside will brackets when nothing inside both square brackets but nothing inside and bull curly brackets with nothing died and yes you guessed it they're all false now functions can also return a boolean value but we're not going to dive into it right now just because we haven't done functions yet let's now have a look at python operators now operators are usable for operations on variables and values for example let's use the plus operator to add together two values we said print 10 plus 10. now addition isn't the only operator that you can use you could also have subtraction which is just minus multiplication which is an asterisk modulus which is going to be a percentage symbol python also has a lot of assignment operators how these work is x plus equal to 3 is going to be the same as x equals to x plus 3. x minus equals to 3 is the same as x equals x minus 3 and so on and so forth there's also comparison operators which give us boolean values as we said earlier these include equal 2 which is gonna be two equal signs next to each other greater than or equal to and even less than or equal to greater than or equal to which is going to be a greater than time with an equal to sign right next to it and less than or equal to which also follows the same principle as greater than let's now go ahead and have a look at python lists now lists are used to store multiple items in just a single variable list of one of the four built-in data types in python they're used to store collections of data the other three are tuples sets and dictionaries all of these have different qualities and usages list equates using square brackets let's go ahead and say list equals to square brackets apple banana oranges in the next line we can go ahead and print out our list and it gives us a pre-expected output now list items are ordered they can be changed and they also allow duplicate values items in list are also indexed the first item has an index of zero and the second item has an index of one when we say that the lists are in order it means that the items will have to have a defined order and that order will not change unless if you do it manually if you add new items to the list then your items will be placed at the end of the list since the lists are indexed you get multiple items with the same values we can go back to our list and we're going to add in apple and orange again at the end and when we print this out we get five different values to check how many items a list has use the lend function this is really helpful to help you print the number of the items in the list out if you go back to our list on the top we can go ahead and say print then and then list as you can see here prints out five now inside list you can have any data type whether that be a string an integer or even a boolean value let's now have a look at tuples now tuples are used to store multiple items in just a single variable and once again this is one of the four built-in data types that's used to store collections of data a tubal is a collection which is ordered however it's unchangeable which is why it differs from list and tubals are also written with round brackets instead of square let's go ahead and say tuple equals to again apple banana and orange when go ahead and print this out we get the expected output now as you know tuple items are ordered unchangeable but they do still allow duplicate values and again they are indexed so the first item has the index of zero the second is one the third is two and so on to work out the tuple length we can again use the link function and for this example we'll get three you can also create a tuple with only one item to do this you can go ahead and say this tuple equals apple but then we need a comma at the end otherwise python will not recognize it as a tuple and again just as list we can have any data type that we want let's now have a look at sets this is a third built in data type that can be used to store collections of data the sets are again used to store multiple items in just a single variable however a set is a collection which is unordered as well as on indexed and sets are written with curly brackets let's go ahead and say set equals to apple banana and orange now if you go ahead and print this out the result will be unordered this is because that's just don't have a defined order in addition to that they also can't have two items with the same value duplicate values here will be ignored so we go ahead and change our set variable to add an example at the end as you can see it simply just ignores it however again if you want to get the length of the set you can again use the len command and just like list and tuples you can have any data type now let's have a look at dictionaries this is the last function for drawing sets of data dictionaries are used to store data values and key to value pairs a dictionary is a collection which is ordered from python 3.7 if you're using a version from 3.6 earlier the dictionaries are on order but they are still changeable and they still don't allow any duplicates dryer dictionary you have to use curly brackets have keys they also lead into their values let's go ahead and create our first dictionary so we're going to say dictionary equals to brand it's going to be forward the model is going to be focused and the year is going to be 2010. when you go ahead and print this out it prints out exactly what we wrote but in just a single line now the items in this dictionary are ordered from python 3.7 changeable and they also do not allow any duplicates and as i said earlier dictionary item is also presented in key to value pairs and can be referred to by using the key name to print the brand value of the dictionary we go ahead and say print dictionary and in square brackets we have to give the exact name of the key which is going to be brown as you can see here it prints out forward we can also do this for the model as well as the year now just like says dictionaries also don't allow any duplicates so if we go ahead and try and say yeah it's 2021 then simply going to ignore the value have a look at the dictionary length again we can use the link function and for this example here we're going to get 3. let's now have a look at some conditional statements so we're going to go ahead and again say a equals to 100 and b equals to 200. now if b is greater than a then print out b is greater than a else printout a is greater than b now if you go ahead and run this it tells us that b is greater than a now python relies a lot of indentation now indentation is a white space in the beginning of the line so for example we get rid of the indentation in front of print we get an indentation error now in addition to this we can also use the alif keyword the lf keyword is python's way of saving if the previous conditions were not true then try this one so let's go ahead and change our value of b to 100 as well and we'll say l if a equals b then print a and b are both equal in this example a is equal to b so the first condition isn't true and hence python goes to the alif statement which is true and hence we get the result a and b are equal let's now have a look in while loops now python has two primitive loop commands one loops and four loops with a while loop we can execute a set of statements for as long a condition is true we're going to go ahead and say i equals 1 and we're going to say while y equals 1 print i as you can see this is going to go on forever because i is always going to be 1. let's now go ahead and change this loop up a bit and we're going to say that while i is less than six print i and also i plus equals to one if you don't remember what this does i equals i plus one when we run this we get one two three four and five before the loop stops we can also add in a break statement so we can go ahead and say if i equals to five then break as you can see here we only just go up to four because the loop breaks as soon as i is equal to five now opposite is a break statement it's a continue one so we're going to say if i equals to five then just continue we again get up to five we can also use the else statement with while so if we go ahead and get rid of the if i equals five statement then we can change that to say else print i is no longer less than six so still going to count all the way up to five let's have a look at some for loops now a for loop is used for iterating over a sequence this can either be a list a tuple a dictionary a set or even a string with the follow we can execute a set of statements one for each item in the list tuple dictionary or even a set so let's go ahead and make our first list we're going to say fruits equals apple banana and orange then let's say for x in fruits we're gonna go ahead and print out all the different foods in a different line even strings are iterable objects they all contain a sequence of characters to loop the letters through the word banana we go ahead and say for x in banana in quotations print x what it says is just prints banana but with all of his characters separated in six different lines we can also use break statements in for loops so if we go back to our statement in the first place we can say for x in fruits blueprint our x however if x equals the banana then break so what this is going to do is just going to print out apple banana and then the code is going to break if you move the if x equals banana pop above print x then it's only going to print out apple and then break now again just like the while loops we can also use the continue statement with for loops we can also use else in for loop so let's go ahead and say for x in fruits print x l sprint i'm done and as you can see it's gonna print out all the fruits in a different line and then it's going to say i'm done now follow-ups cannot actually be empty however if you put in a pass statement you can avoid getting an error now this can be used if you don't really have anything to put into the loop right now however you know that you're going to need it for later let's have a look now it functions a function is a block of code which only just runs when it's called you can pass data known as parameters into a function a function can then return data as a result now creating a function is really easy in python it's defined by using the def keyword we're going to go ahead and define function and inside the function we're going to say print hello i'm a function let's call the function we have to use the function name followed by parentheses so if we go ahead and say function and then the parentheses then it prints out hello i'm a function information can be passed into functions as arguments arguments are specified after this function name inside the parentheses you can add as many arguments as you want just try and separate them with a comma let's go ahead and make a new function we're going to define this function and call it name we're going to pass in the argument of name and when the function is called we're going to print out name now to actually give the function what it needs to print out we have to call the function and in the parentheses we have to put in the argument so here i'm going to call in the function and put in my name as you can see for the output it prints on my name now when you are calling function you need to call it with the correct number of arguments no more no less or else you will get a type error now python is an object oriented programming language almost everything in python is an object with its own properties and methods a class is like a blueprint for creating objects to create a class we use the keyword class let's go ahead and make our own class so let's say class my class and in there we're going to put in the variable x and the value of that is going to be 5. now let's go ahead and create an object we're going to say new equals my class and remember the parentheses let's go ahead and now print out new dot x and this shouldn't print out the value of the property that's named x but it's inside the class so that's how you can make a really basic class in python but now you can go a lot more advanced in that however for the sake of this tutorial i won't be doing that as they can get quite advanced so that's gonna be it for this video thank you so much for watching if you did enjoy don't forget to subscribe to my channel as well as the new boston's channel and also comment down below if you'd like to see more longer and comprehensive tutorials on python again thanks so much for watching i'll see you in the next one you"
  },
  {
    "title": "GOT7 'PYTHON' MV",
    "video_id": "4d5C_PQl8Tg",
    "url": "https://www.youtube.com/watch?v=4d5C_PQl8Tg",
    "views": 22929623,
    "transcript": "Rainbow roses fancy ice\nMelt away inside your eyes  A dreamlike Site that feels so real\nFeelings drifting like the tide I left my guard down for a minute\nI never play with feelings but   I thought you were committed\nThe way that I’m addicted is specific  It’s your vibe it’s your mind \nit’s the things I can’t describe I’ve been running backwards\nRunning backwards like a marathon  In every moment, you're always there\nI can't control it  Only the senses you've tamed\nKeep doing as you please, No I know I’m an icon\nWatch me with the lights on  But she got a hold on me like a python  I don’t wanna lose her\nYeah she was my Future  Shot to the chest I was falling for the shooter\nI don’t wanna I don’t wanna have to let her go I should move on I know\nI know I’m an icon  Without you, all the lights off\nBut she got a hold on me like a python (Yeah yeah)\nI gave you my time when I didn’t have much  All of my feelings swept under the rug\nI’m touring the world but I’m   missing the one who held it down\nMusic is how I’ve been venting now  Broken glass I’m bleeding out\nOverseas I’m selling out Private planes I got taste \nI got seven golden rings  My accountant called me up said \nthe moneys stacked to space  What a snake with them eyes \nI won’t even try to lie  I wish I could let you go \nI wish I could say goodbye I’ve been running backwards\nRunning backwards like a marathon  In every moment, you're always there\nI can't control it  Only the senses you've tamed\nKeep doing as you please, No I know I’m an icon\nWatch me with the lights on  But she got a hold on me like a python  I don’t wanna lose her\nYeah she was my Future  Shot to the chest I was falling for the shooter\nI don’t wanna I don’t wanna have to let her go  I should move on I know\nI know I’m an icon  Without you, all the lights off\nBut she got a hold on me like a python"
  },
  {
    "title": "GOT7 'PYTHON' Dance Practice (Fix ver.)",
    "video_id": "7_R1RqFVQVM",
    "url": "https://www.youtube.com/watch?v=7_R1RqFVQVM",
    "views": 1096237,
    "transcript": "[Music] [Applause] [Music] don't [Music] gete it's your [Music] [Applause] [Music] [Music] I don't want to L shut through the chest I was for a Sho I don't want to let go I [Music] move [Music] got ieven my account set the money what with eyes I even try to lie I wish I let you go I wish I say goodby running [Music] [Applause] [Music] [Applause] [Music] back I she was my sh to the chest for Sho I don't want to want to let go [Music] I hold [Music] I know I'm a me with the lights on but she got to hold on me like a"
  },
  {
    "title": "GOT7 'PYTHON' Dance Practice (Husband ver.)",
    "video_id": "nL88mOfHBSA",
    "url": "https://www.youtube.com/watch?v=nL88mOfHBSA",
    "views": 889317,
    "transcript": "[Music] never play with I it's [Music] [Applause] [Music] [Applause] [Music] your hold I to she was my sh the chest I was to Sho [Music] [Music] down beding [Music] i i [Music] i me like a p i want to you was my future to the chest I was fall for the Sho I don't want to I don't want to let it go I should move hold [Music] I know me with the light on she got hold on me like a"
  },
  {
    "title": "Python: The Documentary [OFFICIAL TRAILER]",
    "video_id": "pqBqdNIPrbo",
    "url": "https://www.youtube.com/watch?v=pqBqdNIPrbo",
    "views": 42811,
    "transcript": "Okay Google, where was PyCon held in 2015? In Montreal. Oh it was Montreal... Really?! So the story goes, that Guido invented\nPython over a Christmas holiday. I showed it to Lambert and I said: \"look what I made\". He types one very short line of code and it crashes the interpreter. And he knew that it would! The point escaped me, I didn't know why he thought this was better than ABC, and why he had done this whole project. It was a pretty crushing experience to be honest. Immediately on trying it, I was just amazed and thought this can't be as good as it is. You can see Python code, even if you've \nnever written a line of Python, and if you know how programs work\nyou can understand it and grasp it. You see that click in real time. We were paid our salaries every 2 weeks, and then suddenly in late October, we weren't. It was a moment where the \n[ __ ] could have hit the fan. If all the Python guys went their separate ways, Python wasn't big enough to survive that \nat the time. Trying to build a language is non-trivial. That actually took real design, real thought, and real ecosystem collective innovation\nover the course of decades. That was my car when I lived in Virginia. I think it was me who suggested that Guido \nbe called \"The Benevolent Dictator\" and then Barry suggested \n\"Benevolent Dictator for Life\". The Python 2 to Python 3 transition was\nextremely difficult for the community. Some of that probably got away \nfrom us a little bit, in hindsight. I did feel like Python had a \nchance of becoming irrelevant. When you don't have role models \nwho you can relate to, you start believing that you cannot do it. When I first saw the walrus operator, I didn't like it. It got very vocal and blown up. One person's succinct elegant \ncode can be another person's unreadable puzzle or a fusticated mess. Nobody had expected I would resign. And certainly not that I would \nrage quit over this issue... Which essentially it was. How much of Python's success in AI can be traced back to these \nscientists in the '90s? A hundred percent. Python's a fantastic language \neven if you're not a scientist, I just don't think it would have risen to the \nlevel of dramatic usage without the science first, data science, \nand machine learning story. We had a massive impact on the world."
  },
  {
    "title": "Beginner Programming Project Tier List 👩‍💻 #software #programming #technology #code",
    "video_id": "h2KD4kiCRAc",
    "url": "https://www.youtube.com/watch?v=h2KD4kiCRAc",
    "views": 294251,
    "transcript": "here is the beginner programming project tier list first off we have a calculator app and honestly I got to put it at B tier next up is a chatbot and I got to put this at like probably a d tier to be honest because all you do is learn to interact with other apis and I don't really find there to be a lot of complexity outside of that a quiz application I'm also going to put D tier next up we have a weather app and again I'm going to put a c tier because it has some novelty to it what you don't with weather or something wouldn't you like to know weather Boy Next we have the to-do app and I got to put it at s tier I'm sorry it's the goat for a reason currency exchange I'm going to put at B tier a notebook app I got to put at a tier a password generator I'm going to put at B tier a personal website I got to put add a d tier as well and last the tict Tac Toe I'm going to put s tier as well you can learn so much you can learn AI intelligence you can learn web design like you can just do so much with tict Tac Toe an absolute goat"
  },
  {
    "title": "Nemo - The Code (LIVE) | Switzerland🇨🇭| Grand Final | Eurovision 2024",
    "video_id": "CO_qJf-nW0k",
    "url": "https://www.youtube.com/watch?v=CO_qJf-nW0k",
    "views": 40942986,
    "transcript": "[Applause] welcome to the show let everybody know I'm done playing the game I'll break out of the chains you better [ __ ] a up I'll pour another cup this is my boy so drink it up my friend [Applause] W the [Music] story I I went to hell and back to find myself on track I broke the code W like am night I just gave it some time now I found Paradise I broke the code oh yeah let me tell your T by life for the good and the bad better hold on tight who thees what's wrong what's right everything is bad everything's light I got so much on my mind and I've been awake all night I'm so pumped I'm so sight it's bigger than me I'm getting so height like let me taste the lows and highs let me feel that burning fright this story is my I I I went to head and back to find myself on track I broke the code what oh like am not I just gave it some time now I felt Paradise I broke the code somewhere between the O's and on that's where I found my kingdom come my heart beats like a somewhere between the O and wi that's where I found my kingdom come my heart beats like a Dr [Applause] I went to head and back to find myself a tra I broke the code oh like I enough I just gave it some to now I found Paradise I broke the code W oh W oh thank you so much"
  },
  {
    "title": "Country Phone Code Secrets 📞 Why USA & Canada Own +1 🌍",
    "video_id": "6-MSOANUAWQ",
    "url": "https://www.youtube.com/watch?v=6-MSOANUAWQ",
    "views": 8083632,
    "transcript": "Ever wondered what country phone codes actually mean? And why are there only two singledigit codes in the world while all the others have two or even three digits? Look, only four countries have a golden code. Plus one for the USA and Canada and plus 7 for Russia and Kazakhstan. However, Kazakhstan uses plus 7 temporarily. So where's plus two plus three and all the rest? The thing is in the 60s the world was divided into phone regions and each region was assigned its own starting number plus one went to North America plus two to Africa plus three and plus four to Europe plus 5 to Central and South America plus six to Southeast Asia and Australia plus seven to the USSR plus 8 to East Asia and plus 9 to the Middle East. So singledigit codes were given to the top priority countries for quick communication, while others were first assigned a regional code and then a unique number for each country. And you know what doesn't exist? A plus zero code. Maybe they're saving it for Antarctica or even the"
  },
  {
    "title": "Nemo - The Code (Lyrics) | Switzerland Eurovision 2024",
    "video_id": "RCk4b9X8LYI",
    "url": "https://www.youtube.com/watch?v=RCk4b9X8LYI",
    "views": 1479141,
    "transcript": "[Music] welcome to the show let everybody know I'm done playing the game I'll break out of the chains you better put a up I pour another cup this is my boy so drink it up my friend I I went to hell and back to find myself on track I broke the cold W oh like am I just gave it some time now I found Paradise I broke the Cod yeah let me tell you a t about life but the good and the bad but the Hold On Tight who the what's wrong it's right everything is balanced everything's light I got so much on my mind and I've been awake all night I'm so pumped I'm so sight it's bigger than me I'm getting so hyp like let me taste the lows and high let me feel that burning FR I went to H and to find myself on track I broke the C oh like that fem I just gave it some time now I found Paradise I broke somewhere between the O and on that's where I found my kingdom come my heart be like somewhere between the o on that's where I found my kingdom come my heart beats like a [Music] [Applause] [Music] Dr wo I went to hen to find myself on track I broke the like I'm N I just gave it some time now I found Paradise I broke the"
  },
  {
    "title": "Nemo - The Code - Opening Act at the Grand Final | Eurovision 2025 | #UnitedByMusic ​​🇨🇭",
    "video_id": "ETnqAaSmlvY",
    "url": "https://www.youtube.com/watch?v=ETnqAaSmlvY",
    "views": 394922,
    "transcript": "Welcome to the show. Let everybody know I'm not playing the game. You might break out of the chains. You better buckle up. I'll pour another cup. This is my boy, so drink it up, my friend. The story is I went to heaven to find myself on track. I broke the gold like I just gave it some time. Now I found paradise. I broke the code. Somewhere between the O's and on that's where I found my kingdom come. Oh, heartbeats like a Dr. I I went to hell to find myself. I broke the code. Oh, good evening, Buzzel."
  },
  {
    "title": "build a meme Python website (Flask Tutorial for Beginners)",
    "video_id": "5aYpkLfkgRE",
    "url": "https://www.youtube.com/watch?v=5aYpkLfkgRE",
    "views": 574800,
    "transcript": "Are you ready to harness\nthe power of Python, APIs and flask. And with these powers, we can make super awesome\nwebsites like this meme website, giving you a fresh big meme from\nReddit every 30 seconds, by the way, we're gonna build that site in this video. And I built this page to keep track\nof my daughter's key balances, a cryptocurrency I built\nfor their allowance. And you might remember I used it from\nmy Halloween video back in the day. So get your coffee ready. We're about to level up our Python\nskills by interacting with some APIs and learning how to use flask. A web application framework used by the\nlargest companies in the world. Now, the beautiful part about this is that\nit's pretty easy to learn and get started with flask, which means this\ntutorial is for everyone. Even if you don't know Python\nthat's okay. Now don't get me wrong. Knowing a bit of Python won't hurt, but you will still be able to\nkeep up if you're brand new. So quick coffee break, and let's\ntalk about what you need first. You'll need a Linnux computer. Now, if you don't have one or\nyours is slow and dumb, do what I do spin up a wicked fast\nLinux virtual machine in the cloud with Linode the sponsor of this video\nat just 0.01 cents an hour. This will pretty much\nalmost cost you nothing. Especially if you just wanna try\nthis with me, get a super slick, awesome meme website up and running, let it run for an hour\nand we need to delete it. It costs you this much less than a penny. And if you do wanna leave it up forever, because of course you don't wanna deprive\nyour friends of sweet, sweet memes. It's just five bucks a month. That's it. So head on over to a node.com for\nslash network shop and check this out. If you're new to Leno, you get a\nhundred dollars credit free for 60 days. So yeah, that means you can run your\nmeme website for free for 60 days. That's a lot of memes, totally\nworth it. So again, Lennox, computer can be a server can be\nLeno doesn't matter. And the last, but certainly not least everything in\nit requires a delicious cup of coffee. I chuck.coffee. So here\nwe go. Let's get started. If you haven't already go ahead and\nspin up your Linux VM in the cloud. I'm gonna make mine right now.\nIt'll take just a few moments. I'll run the latest version of Ubuntu in\nDallas. It's gonna cost me 0.08 cents. And then in just a few sips of coffee, I'll be up and running\nand mine is running. I'm gonna go ahead and copy this SSH\ncommand, copy, launch, command, prompt, or terminal on Mac and Linux and\npaste that command. Here we go. Except off of your prints. Wait, no,\nyou guys happened. Yes. And I'm in now, before we build our website with flask, let's first talk about what even is\nflask and how do we use it with Python? Flask is a web application framework, basically just a tool we\nuse to build a website, but what's cool about flask is that\nit's actually written in Python. And as a result, it feels like\nPython, which we know feels awesome. And that's why I love flask\nbecause I already know some Python, which means I don't have to learn\nreally much else to make flask do stuff. That's the power here. You'll actually use Python to populate\ndata with flask and a big reason people use flask is that it's\nreally, really lightweight. It's referred to as a micro framework\nbecause it's designed to keep things simple. And I love simple. So yeah, we\nare kind of doing something dumb here, building a mean website, but just know the foundational skills\nyou're learning to do that are used in fortune 500 companies. It's a skill\nthat you wanna learn if for anything, just to be able to produce websites\noutta Python for your projects and your hobbies. So enough talking about it,\nlet's actually install it right now. And just like FLAS itself. The installation is pretty simple. First. Let's make sure we have PIP\nthree installed for Python. So we'll do a pseudo PT update\nto update our repositories, take a little coffee\nbreak while it does that. And then we'll do an a P T\ninstall Python three dash PIP, which if you don't know what PIP is, it's what we use to install\na bunch of Python libraries, basically additional tools we can\nuse inside our Python scripts. And then I'll do a dash.\nWhy at the end hit enter. Let that sucker install again. One\nmore coffee break. Mine is done. And then with one command we can\ninstall flask. It'll be PIP three, install flask. That's it hit enter, and\nit's gonna do its thing. That was it. It's done now real quick. We are gonna\ninstall one more tool type in PIP. Three install requests request is\nwhat we'll use to interact with APIs. That's how we're gonna get those\nmemes from Reddit. So go ahead, install that right now. Mine was already\ninstalled. You might get that message. Cool. And now here in about 30 seconds,\nwe're gonna run a website. You ready? Here we go. Type in nano flask, test\ndot pie and hit enter, push bang, gotta do your shebang. The first thing we'll do with our Python\nscript is important libraries we need. So first I'll type in\nfrom flask imports, flask, keeping in mind that case is important\nhere. And then right after this, we'll create a variable. We'll call it\napp and we'll have that equal flask. And then aside parentheses we'll do\nunderscore underscore name underscore underscore closing parenthesis. Now what happened here while we created\nour variable app and we had that set or equal to the function flask and inside\nthat function is a special Python variable called underscore\nunderscore name. Underscore all this is doing is telling\nthe application flask, Hey, everything, you need to run this website from\nfiles to folders to whatever it is. It's all right here. You don't\nhave to go anywhere else. It's in your current directory. And\njust after setting that variable, we're gonna do something a bit strange.\nWe're gonna do some decorating. You like decorating, right? \nmaybe not, but we're off to do it. Go ahead and type in the at symbol. And then right after that\ntype in app dot route, we'll do an opening parenthesis, do double quotes and put a back slash\ninside of that closing double quotes and closing parenthesis. Now\nwhat is going on right here? What's that at symbol doing\nnow? I'm not gonna go too deep, but this is known as a Python decorator. And all you have to know about it right\nnow is that it's going to decorate or add more functionality to a function\nwe're gonna reference right below. And then right after the ad symbol is\nwhat we're gonna decorate our functions with. Notice we're calling the at\nvariable, which we just set up here, which is flask. And then part of\nflask, we're calling dot route. And when you hear the word route, I want\nyou to think, okay, the place to go, where to go the location. And that's what we're doing\nright here in the parentheses, a back slash what that's\ntelling the application. The function is that when someone\nnavigates to the website, let's just say, network, chuck.com. When they go to the\nroot of the website, just right here, nothing after the URL, when\nthey go to that location, we're gonna do some stuff down\nhere in the next function. So let's do that right now. Let's tell\nit what to do. So go ahead and hit enter, and we'll define a function. So Des and we'll call this index type\nan index open and closing parenthesis. Now, if you're in the\nprocess of learning Python, you never heard the word function. It's just a collection of a few lines of\ncode that we can call and use later in the script. So then we'll hit enter space\nfour times 1, 2, 3, 4, like a spacing. And Python's very important. Don't\nforget it. And we'll do one simple thing. We'll type in return.\nAnd in double quotes, drink more coffee right now and\nclose out with double quote. So while this does look kind of weird, here's all we're doing\nwith flask right now. We're saying when someone goes to\nthe base URL network, check.com, whatever it is just simply return,\ndrink more coffee right now. And then we have one more line\nof code to run type in app.run. So we're calling that app variable,\nwhich is flask. We're telling it to run. And then inside that function,\nwe're gonna pass in host equals, and then double quotes will say 0 0,\n0, 0, and then comma space port equals. And we'll just say port 80. And if you\nhave a conflict, you can try port 5,001, but port 80 should work most of the time. Going close that out with a\nclosing Pery and that's the code. This last line of code is\nbasically saying flask.run. It's telling it to run on our host\nand on port 80, let's try it out. Hit C control X, Y, and enter to\nsave Python three flask test dot pie. Here we go. Okay. It's running.\nNotice that by saying 0 0, 0, 0. We're telling it to run on\nall the addresses. Perfect. And also notice we get this kind\nof scary warning. Like, Hey, this is for development\nown. And you're like, Chuck, I thought you said big companies ran\nthis Netflix doesn't do this. Right? They do use flask, but not quite like\nthis. That's a video for another time. This is fine for you right now.\nIt's fine for a mean website. So we'll see if it worked. Let's\nuh, grab this URL right here. Copy. And let's go visit a website. Pace that\nsucker in bam. Let's command. Do it. Okay. Now let's take that simple\nwebsite and turn it into a mean website. Are you ready? Let's do this. So getting back to our terminal\nto close out your flask app, just hit control C to stop running\nit. Control C again, here we go. Okay. It's done. So now that you understand\nthe basics of how flask works, let's actually build the meme website.\nLet's start with making a directory, a directory. That's gonna store\nall our information for NK, D I R. And we'll call this meme\nunderscore flask, bam, and let's CD into there CD mean flask. Now our mean website is going\nto involve two things. First. We'll have our Python script, which\nwe'll call mean flask dot pie. He has two jobs. First run flask.\nWe just saw how that works. Second, we're gonna use him to call out to an\nAPI specifically this API right here. So thank you to this person. And what this will allow us to do is get\na random meme from a subreddit and the interval of our choice. The second\nthing we're gonna need is some HTML, just some basic stuff to\nbuild a little static webpage, we'll call this simply\nindex HTML, and don't worry. I'm not gonna make you build or learn\nHTML right now. I've got a script below, just copy and paste. So let's get to work on building these\ntwo things right now, which by the way, both those things are below.\nSo feel free to copy and paste, but I'm gonna walk you through\na few of these things right now, so you can possibly build your own stuff\nlike I did with my daughters tracking their key balance. Cryptocurrency\nlet's work on Python. First I'll type in nano meme,\nunderscore flask dot P Y today. Make sure you do it best practice to\nstart out. It won't be too different. We'll import flask from\nflask import flask, but we're also going to import\nthe render template function. This little magic piece of code is\nwhat allows us to reference and use an external HTML code or script. And\nthen we'll import a few more things. We'll start with importing\nrequests. Remember, we'll use that to interact with our API\nand then we'll import good old JS O and before we decorate with our app dot route, we're first gonna paste in some code\nright here. We'll paste it right now. Again, all code below function we're defining\nand we'll use here in a bit is what we're using to interact with the\nReddit API or not the Reddit API, an API that allows us to talk to\nReddit. I don't wanna get in trouble. There's a ton of fun stuff going on\nhere. I'm not gonna cover it right now. I may make another video on how\nto interact and play with API. Just know you're gonna get a sweet, sweet meme from this and make sure you\nread the comment here about getting certain memes that might, you know,\nmight not be safe for work and stuff. I'll just blow that function as\nwhere we'll start to decorate. And I'll go ahead and copy\nand paste this code again. The same story we started decorating and\ntelling the next function that's gonna run. Hey, when they go here, when they\ngo to the base of the URL, do this. And all we're doing here is using that\nget meme function that we defined up here, and then using that\nmagical render template. I told you about we're gonna return or\npass two variables to this meme index ACML file, which is the\nH CML for the website. So these two variables right here, which will be in populated by\nthis script or by this function. And then our script is almost done. Just one more command app.run host\nequals and same stories before 0, 0, 0, 0 to run every single IP\naddress and then specify your ports. I'm gonna say 80, and that's\nit. It control X, Y and enter. So Python script done. Now it's\ntime to build out the HTML file, which I told you. We're not gonna do\nanything. We're just gonna make it. Now. Flask is kind of finicky. It'll look for the HTML inside\na folder called templates. We have to make that folder for, so we'll do MK D a R templates\nthat we'll CD into that folder. And here we'll make our HTML file.\nNano meme, underscore index dot HTML, and then simply copy and paste\nthe code. Now, before you save it, let me show you two really cool things. Look at the two things\nbetween the double brackets. That's the variables\nwe're passing through, and that's the relationship between\nour Python FLAS script and it's HTML. So let's go ahead and save\nit. Control X Y enter to save. I'm gonna CD dot.to get back a directory. And now all we have to do is run that\nPython script and we're good. So Python, three name flask dot\npie. Ready? Set go. Well, I forgot something. What did\nI forget?  this is fun. Live troubleshooting. It tells me right\nhere. Name error app is not defined. So you probably already,\nalready guessed what I missed. If I jump back in that script, I\nforgot to define the app down here. App dot route. I didn't define\nwhat app was. We did that earlier, so I'm gonna put that right\nup. Top app equals flak. I'm gonna score name. Okay. There\nwe go. That should solve it.  control X Y enter to save.\nLet's try it once more. Okay. It's on, it's running. Let's see if it\nworks. And bam, just like that, your very own meme website. Now I love flask because I can quickly\ntake a project I'm working on in Python and make a webpage out of it. So the\nexample I gave you of my daughters, having cryptocurrency that\nI give them as allowance. I wanted to track how much they had\nwithout having to look at their wallets or go to soul scan. So using Python, these\nsoul scan, API and flask, I have a nice, cool dashboard. And that's what I\nwanted to unlock for you in this video. Not that I'm gonna teach you everything\nyou could ever know about flask, because that would take. Forever. And I don't know it, it's a, I\nwanted to show you what you can do with, FLAS give you one solid example and how\nyou can start to build from that and do your own things. So what I want you\nto do is take what I've done here, have your own meme thing, do that,\nor take it and make something else. And I know that some of you probably\nwatched this video. Where're like, wow, I don't know what you're talking about.  I'm still very new in\nPython or I don't know any Python. And you said the word flask, and I\ndon't know what you're talking about. I went high level on purpose because it\nwould take forever to make this video, which is already,\nprobably too long anyway, but I hope I gave you enough code\nand just enough to like bread crumbs, to follow along that you could build\non the knowledge you already have. So anyways, I wanna see your websites.\nIf you make some FLAS websites, dude, put it below. I wanna see that. And I\nknow you're probably thinking this too, Chuck, how do I make it\nto where it's persistent? Like what if my server reboots\nor my computer reboots? How do I make it come back up? Great\nquestion. And we already covered that. I'm not gonna cover that here in this\nvideo again and make it too long, but we do have it in our write\nup and our lab walkthrough, which will have in a link below, which\nwill include all these scripts. So yeah, just go crazy, have fun with flask. And I hope this opens up\na whole new world for you. At least it did for me because\nI love writing stuff in Python. Python's so fun and I love to make\nit like available to people through a website. So anyways, I hope this\nvideo was helpful for you. Um, I really do appreciate you taking the\ntime to just have some coffee with me. Talk about Python and flask and APIs who\ndoesn't wanna do that. It's just fun. And also make sure you hack\nthe YouTube algorithm today. Make that like button notification\nabout comment. Subscribe. You've gotta hack YouTube today.\nEthically of course. And yeah, that's all I have. I'll\ncatch you guys next time."
  },
  {
    "title": "I Created this website using Pure Python | Anvil Tutorial 🔥",
    "video_id": "0U9-KUx0SD8",
    "url": "https://www.youtube.com/watch?v=0U9-KUx0SD8",
    "views": 516546,
    "transcript": "Python community is asking how to make an end-to-end web application using only Python. In today's video, I will tell you about a tool with which you can make an end-to-end web application using Python. With no compromise, you can use a database or backend. You can write very strong logic. I will cover all these things in this video. Let's go to the computer screen. The first thing I am going to do is I will go to nvil.works After going to nvil.works I will sign up for nvil.works I will go to nvil.works As soon as I go to nvil.works You can see the start building option Is coming in front of me I am going to open the start building option After clicking on start building, it will ask me To create an account and start creating a web app So here I will sign in with google Because it is the most convenient for me And here I will sign in with my account And according to me, I'm signed in So I have signed in here, as you can see And after signing in, the next step is to create a blank app now you get a lot of templates here, if you want to use these templates then you can, like if you want to create a static site so there is a template for static site here, along with that if you want to create an online shop, there is a template for that so you can explore these templates but here you will see a blank app as soon as you click on the blank app now in this also you will get a lot of themes that what kind of app you want to make I will use material design 3 here the biggest advantage of making an app with anvil is that if you only know python, you can make your web app from Python there are many people who want to come in web development although web development you must learn HTML, CSS, JavaScript learning all this is not wrong but simple web app only using the powers of Python if you want to make and will is the thing for you so here as you can see I have come here and the name of this app is M3 App 1 so first of have come here and the name of this app is M3 App 1 So first of all, I will change the name of my app and I am going to name it Membership Form So I am going to make a membership form, simple, so that I will tell you how to put this form's data in the database Ideally, if you have to do this work, let us say HTML, CSS, JavaScript or I assume a backend with the help of NodeJS then you people will have to come to NodeJS you have to connect with MongoDB, whatever database you want to use it is on you, you have to connect with that after connecting you will write how you will put data in your app you have to write backend, you have to deploy the app it is a long process, okay? so i will say that if your target is a simple form app type then you can use nville and if you know python this is the biggest, only python you know, you can use nville you can make backend, you can write frontend code, i will show you how, so i will here join our gym for fitness okay, suppose this is a gym membership form and here it is written join our gym for your personal fitness ok, now here i give a description gym membership website now here you can put the app logo you can change the image here, i let it be and i come here in my app now here as you can see i have a toolbox on the right then here i come to my app now here as you can see i have a toolbox on the right side, here i have a form here i can see many things, simply i can drag and drop and make my ui, let me show you how so here the first thing i want to do is that i will put the text here now see when you highlight it, sorry when you hover it you can see here this is rich text, this is link this is button, now here I want to put a label I will show you what kind of label looks like Label looks like this and when I scroll here I get the text inside it to edit it so I will write enter your name, okay here it is now here the role of here i can change the role and along with that i will show you how i can put a text on it, so here if i come here, and this is display text label display text, this is rich text, this is link ok, so like this you can do things, now one more thing that here you will click on run in a new tab, after clicking on these three dots so you can see this app at this point now one more thing, when you click on run in a new tab after clicking on these three dots so how this app is looking at this point it will tell you, you can see here that my app is loading and see here it has written enter your name, awesome after enter your name, i want to put an input here i want to put a text box, not text area, i will put a text box because it is just a simple name and what placeholder you want to put inside it I will write here name your name, ok? and see here if I reload it, it will show me that you can put your name here, your name, whatever your name is you can put it here, now if you want it to look a little big then you can click on more in layout and click on more in layout and then click on more in appearance and here you will get a lot of options what should be the border, what should be the foreground, what should be the background if you go to more in text then you get alignment, then if you want to increase the font size like I want to keep it 20 and I will see what happens after keeping it 20 font size I will restart it and see, it is looking like this I will prefer a bigger font size so I will keep it bigger now I will enter your name I have entered your name, now what I will do is I will write for more fields I will show you what I am saying so here I'll write the text I'll make the font size 2 I'll make it 20 So I'll make it 20 and then I'll put it like this So after the name, I'll click on Label 2 and I want Enter your weight Enter your weight ok, enter your weight and here in textbox 2, we put whatever you want, i have given font size 20 and here i want to put your weight and after this, let's say I try to use more components here, if you want to put image then you can put image now I can put a check box so what I can do I will put a text here, I will write do you need personal training so I will write do you need personal training and I will put a question and after this I will put a checkbox here do you want personal training or not, I will put it in text yes, ok, let's say I want to put yes here and now I will restart and show you how the app is looking so at this point our app is looking like this and obviously I will make the font to 20 so that it looks consistent with other fields and after this i want to show you other fields like file loader, spacer, flow panel, repeating panel you can try all these, like drop down you can use drop down, date, time, image you can use all these things, okay now here, let's say I want to use an outline button and I want to say submit, okay, I have used outline button and I want to align it on the left side and I want to name it submit okay, I want to make it submit and if you want more questions, you can add more questions if you want select one, you can add this too, it is very similar and if you go to the documentation of anvil, so personally speaking i have spent very less time in this and built a lot so according to me this is something that will definitely excite you now i will come here, now it is saying drop title here so i will do one thing, i will give the title here and i will give here instead of level 4 let's say i will give gym fitness or something like this so i will put here gym fitness and click on restart and see gym fitness is here, I have given the title of this and if you want to add any links then you can add links of new episode like if I add this, if I write home here and I restart the app so see here home is here if I add more text here I will show you and if I write here about so here about, home, contact us whatever it is you can add here so I'll write here contact us you can make a whole website with this now if you'll ask me why should I use HTML, CSS, Javascript why should I not learn I'll improve my skills why should I use HTML, CSS, JavaScript why should i use that why should i use this sometimes you get very simple use cases most of the companies don't have this much money constraint if you give them a paid service and you tell them that their work will be done in less time they have to save time, they have to save hassle they want to save time, resource and work and if you will make this kind of thing with the help of python, in 20 minutes, in 10 minutes if this kind of website is being made, then why not this is the point, now here is it replacing web development, absolutely not but why is this useful? This is useful because if you have only learned Python, started programming, you can make a website. Okay, which is a very game-changing thing. Now if I want to make this submit button a little dark, or change its alignment, or change its border, or if I want to make it a field button, then I can do this. So you can explore a lot of options here. But for now i restart and my UI is done, this is my UI now definitely you will add 2-3 more fields, adding fields is very easy, you want to add text here suppose i want to add here i want to add it up like this, suppose i want to add in label i will make its font size 20, definitely you got the point i don't want to spend a in the title, I will make the font size 20 first definitely you got the point I don't want to spend much time in this I am adding a lot of fields you can add, now I will write in text your address, you can put your address here and this time I will use text area I will show a little variety here so I will use text area here and I think do you need personal training, yes it is looking good and here enter your full address, enter your full address and here what I will do is I will capitalize this and restart the app, let's see how it is looking. So yes, do you need personal training? Here in yes or no, a person can uncheck it, you can see it here and continue. I might as well do something like this okay, so this thing depends on you, how you want to see it, okay so here you can see, I will restart it, oops, why did I stop it I clicked it by mistake, okay, I will run it again, my app is here again, do you need personal training, if you want to do yes, then click on yes, okay, and after this, our form is ready. Now if you want to make the heading of your website, you can make a navbar. You can see here, a navbar is made. If you click here, then it is a kind of navbar. If you click on gym fitness, then it is a kind of logo on the left side. And on the right side, there are navigation bars. If you you want to give a heading then you can do something like this you can give a heading to it, by doing align center you can do something like this, and let's say I want to give the font size 22 so a little big and align its center and you see it as soon as I restart it join the best gym in town, you might as well make it 28 or 30, you can see what is looking good, but I will make it 28 and make it bigger and it looks good according to me, so I have spent a lot of time on UI, now I will come back soon and I will talk about the main thing and that is to create a database, so to create a database you have to click on database, a default database will be added already but I am adding a new table here, I will name it Jim, ok, the name of the table is Jim, I will add a new column what is this, name, weight, address, so I will write here, name, text, create text column, name ok, I have made a name, then add text column and here I will add an address, or I will not make a text column, here i will add address or i will not add text column i will add integer i will make it address for now, then i will add number column and after that it will be weight and after that i will add plus here, add true false column and i will name it personal training add true false column and i will name it personal personal means that person needs personal training at ruffles column and I will keep it in the name personal, ok personal means that the person needs personal training, ok and according to me that's about it, 1, 2, 3, 4, we have 4 fields, all 4 fields are made, ok now we have done this work, our database is made now we will come to server side code, we have to write in the server side code of our app and here we will click on add server module server module means that this code will run on server side why you want to run on server side it is a front end and back end thing now the people who are in python don't have much understanding how websites work so let me tell you how website works your browser is front end, the code that is sent to it is seen by the browser how that code is generated in the back end, this is not seen by the browser and this is the same code that is running on your server, what is being executed on your server, how data is being saved, where is the database, where is the database password, all this backend holds and here I am going to write the backend, now here you see that now anvil.server.callable, this method, you can run it, if I read this, this is a server module and it runs on nvil server and not on user browser to allow nvil.server.call to call functions here we mark them with nvil.server.callable means we make callable functions here so what i will do is i will write nvil.server.callable and here i will make a function called store or submit this submit will take name, weight address and after that, personal personal means, do you need personal training or not it will take 4 things, now I will come here after coming here, I will take 4 things now i will come here, after coming here i will do 2 things one thing is i will bring these values from front end and after this i will show a notification to user for now i will write pass and after writing pass i will come here i will click on submit, if you scroll down you will see when you click on this button then what you want now this is my client side code this method is called when the button is clicked so what i will do i want that whenever any person clicks this function will work so this function will work whenever it is clicked now here i need three things infact i need four things first thing is i have, this will be self. and I have to see what is its name, so I will go to my where will I go, in its client code, I will close this tab I basically want that I get this in its design, this is textbox 1 this is textbox 2, textbox2, textarea1 I have to remember this just for the time being I will come here on split and I will write box 1.text similarly, I will take wait wait will be self. and I will write text box 2 and I will write .text and this will be a string obviously, now what is the problem here no problem, I will address it self.textarea1.text and similarly i will write personal is equal to self.checkbox1.checked which will give me boolean now i will come to my server model after coming to server model what i will do i will write app tables app tables.gym .adro so i will write here tables app tables dot gym dot adro I will write here name is equal to name, address is equal to address, and personal is equal to personal, and weight is equal to weight weight is equal to weight I have written this, so what I have done is, I have said that what should I do, that this table which I have made add all these things in my table I told them to add all these things in my table That's about it Now what i will do is I will call this function I will write anvil.server.call And i will write submit Because submit is a function and I will hold all the entries so I will say name is equal to your name, and your weight is equal to weight and similarly address is equal to address and personal is equal to personal so I have given here something like this, if you know python then you know that you can give function arguments like this And all these four things will be passed here, now after doing this I would also like to show a notification that your data has been added So to show that notification we will also write code, we are doing this because we want the user to user know that it's done so I'll come here to form 1 and I'll write notification and here I'll write your data or your response has been recorded and after this I'll just write this and I'll show the dot, now in this you can explore the timeout and many other options But for now I will do only this Now I will click on restart I will write here I will write my address here I will correct the default value I will write this is my address I will click on now. I will write my address here. I will say yes to personal training for now and click on submit. See, this app has experienced an error. Let me see what the problem is. It says that the weight is a number and cannot set it to a string. So here the weight was a number. So what I have to do is typecast it in the integer. So I will typecast it in the integer. There is no problem. So I will restart it in the DR There is no problem I will restart the app And then I will submit I will write the name, weight, address Address, and I will click on submit Your response has been recorded Now I will show you my database And refresh it how will you refresh it? I will show you, click on gym and refresh it like this here name, weight 34 and it is true let's record it with false let's name it too and I will do something else here I will submit it with false ok your response has been recorded So now I am refreshing my data, all the entries are being recorded Which means our app is working Now I will tell you how you can send an email To send an email, you have to enable the email module So you can click on add, click on email And your email module is enabled If you want to use custom mail server or advanced user, you can click on email and your email module is enabled if you are using custom mail server or advanced user then you can do that too so after this what you have to do is to come back to your server module and here what i will do i will write envel.email.send and i have to do 2-3 things here, who i want to send email to so i will put my email address here Then after this I will write the subject Your response Or I will write response from Anvil app Then what comes after this, text What is your email So I will make it as f string you can use f string, remember that you are using python which is the beauty and I will write feedback from name and then I will write wait is let's say I put wait here and then address and then address and he, and they live at and here i'll put address you can do it in any way i put address here feedback is and here i'll put feedback because i have this feedback as a python variable obviously you can format it well many things can be done I have written it here simply let me correct the formatting so that you can't see the horizontal scroll bar so here I have sent nville.email. I have done 2, subject, text is there anything else I am missing? I don't think so. Now you can add bcc and all, there are options in it, you can see that, okay. You can see this much, you can see. Now what I do quickly is that I test it, so I will restart my app. And here I write in name Harry, then I write in weight, I write in 34 address, I write any address here, Jamun Nagar, Mangobad and India, ok, and do you need personal training, oh yes you need personal training? Oh, yes, I need personal training. Okay Now here's another error. This app has experienced an error. So here it says name feedback is not defined I think feedback was not there. Feedback is Feedback was not there. We had Personal. Okay, I wrote address here and delivered address and after this I will write Personal training required. Okay, I will write here Personal and then I will write personal training required I will write personal training required and I will write personal here, I didn't miss anything name, weight, address and here it is now let's restart, now it will work so I will write name weight here, 234 kg, then after this I will write 89 Mangobad Peach Colony and here India, okay, and I will do personal training or not, I will click on yes, I will click on submit and this time please submit, okay, response has been recorded, let's see if it came here or not, so I will click on my database table I will reload, this is my address in Mangobad or not, yes it has come and did my email come, I will have to see that in my email so I will check my email quickly and I will tell you whether my email an email or not, so yes I have received an email and I will show you how it is written, this is the email response from anvil app and it is coming like this, as you can see so you can use anvil like this and here you will get it like this now one more thing is that the email quota you will get it in paid app see there are some features which you have to pay for but at the very basic level you can build your apps using python which is a big beauty so is it a good thing or bad thing, should we use it or not tell your opinion let's discuss it I am open to discuss this in the comment section Do I use it personally? Yes I do When I use it? When I am in a mood to write python When I want to make a simple app, someone asked me to make a form I use this app If you want to supercharge it with paid plans, you can do that too By the way, many of you must be thinking, how to distribute this? Should I send this link to people? No, you can publish this app. Publish means that you click on publish. Publish means you host it and it will host you for free. Which I find another beauty of it. Let's click on publish this app. And it's as simple as that. It's been published. See, here you you got the url now you can also put custom domain, obviously you have to pay for it but if i open my incognito app and show you and paste it, it works i will submit this form and show you, I will write from incognito and as soon as I write from incognito, my data will come here I write incognito, weight 23 and incognito address, I will end the shift do you need personal training, I will do one thing I will just say yes, submitted and now I will come here and see if I got it or not, I will click on yes and submit it and now I will come here and see if I got it or not. I will click on the table and refresh my data. Incognito address, I had clicked on it twice on submit but this is how it works. I hope you all understood how it is used, how to use it and I hope you understood the email thing too how to send email to you what is your opinion, do tell me in the comment section I will wait for your opinion and do you guys use this kind of app or not do tell me in the comment section definitely html, cs and javascript many people will ask that I was learning html, CSS and JavaScript Many people will ask, should I leave HTML, CSS and JavaScript? No, for very very very complex applications You have to use it And if I talk about Anvil, you can make things like e-commerce websites from Anvil This is also very powerful So, if you want to stay in pure Python And you want to use it in pure Python and you want to live with ease and you want to use all the paid features, then you can do it. And after doing it, many things will be unlocked for you. And many things will be easy for you in this. But if you want to have control in your hands, you want to change everything, HTML, CSS, JavaScript is the way to go I hope you guys understood this thing, do try it out and tell me how it is some people don't try it out I want you to try it out and tell me how is it, did you like it or not, should you use it or not so I want to know all these things from you guys that's it for now guys Thank you so much guys for watching this video and I will see you next time Thank you for watching!"
  },
  {
    "title": "How to Make a Website with Python (Flask app tutorial)",
    "video_id": "qaBo_IiE4Gc",
    "url": "https://www.youtube.com/watch?v=qaBo_IiE4Gc",
    "views": 31909,
    "transcript": "I'm going to show you how to make a flask website with python3 and we're going to start with a very basic Hello World website and then make a static HTML website make it Dynamic with some variables and for loops and then finally make it a multi-page website and we're going to go through this workflow just so you understand the fundamental concepts at each step in the tutorial so that way by the end of the video you have a really good understanding of flask development now I'm going to use vulture a vulture server a VPS server in this tutorial you can use any server that you want but if you don't have a server I have free account credits for vulture below which will get you set up exactly as we're going to do in this video so if you have a server go ahead and Skip forward in the tutorial otherwise let's go ahead and get on into it all right I'm here at my vulture dashboard I'm going to deploy a server by clicking this button we just need a simple Cloud compute server regular performance you can pick any server that's located near you I'm going to pick Silicon Valley and then the I suppose the server image I'm going to pick Ubuntu 22.04 this five dollar per month plan is more than enough for our purposes I'm going to disable auto backups and then that looks good so I'll go ahead and deploy This Server it'll take a couple minutes and when this says it's ready then I'll catch back up with you okay now that our server is running as you can see right here let's click on into it and you may or may not get this message that it's still setting up if so you might have to wait a little bit longer but let's take note of our IP address our username and our password we're going to use this information to log in to the server via SSH so if you're on windows open up a command prompt and actually have other videos about SSH and everything which is what we're going to use to log in otherwise if you're on Mac you can open up a terminal window and you're going to Simply type SSH root which is the username at the IP address I'm going to copy that right here and then paste it in hit enter and then it's going to say do you want to continue connecting do you trust it yes hit enter and then the password for root is this right here so I'm going to copy that and then paste it in and we should be logged into our remote Ubuntu system so here we go let's make sure as is always good practice to update our list of packages with sudo apt update and then let's do a sudo apt upgrade to upgrade all the packages on the system and we don't even have to do anything because they're already up to date so next let's do pseudo apt install Python 3 dashvenv we're going to make a python virtual environment and this package is going to allow us to do that and the reason we do a python virtual environment is to make sure all of our code for our flask app is contained in its own area and we're not interfering with the system packages so with that installed we can do Python 3 dash mvenv for virtual environment and then we're going to make a virtual environment in a new director in our home directory called M and we're going to call the virtual environment Teton okay so that's going to go ahead and do its thing and when that's done we can activate the virtual environment with source and then we're going to go to that same path and B now it exists Teton bin activate okay so now we are in our python virtual environment if you do which python3 you'll see that it is getting the python3 binary from our virtual environment which is perfect okay so with that said we can install the flask package via the PIP package manager and we can do that with Pip install flask hit enter and that'll go ahead and install flask into our python virtual environment now let's go ahead and create our hello world flask app what we're going to do is make a directory with make the make dirt command and let's call it hike okay and let's go into the hike directory with CD and obviously there's nothing in here right now but let's make a file called Peak dot Pi okay I'm going to use the Vim text editor you can use Nano or another text editor I have other videos on how to use Vim if you're interested but for the sake of this tutorial let's just edit this file called peak.pi and what we're going to do is make pretty much the most basic hello world flask app that you can possibly have so you can follow along we're going to from do from flask import flask the flask object we're going to instantiate a flask object and assign it to the app variable so app equals flask and then we're going to pass in the name of this python module which we're currently in and that is in the underscore underscore name underscore underscore variable okay so we're going to add an approot a root for our app and it's going to be at slash so basically when anybody goes to our IP address maybe with a port colon port and then the slash this is what we're going to execute this this definition that we're going to this function that we're going to Define right now called Index this is what we're going to execute Okay and like I said it's going to be simple we're just going to Simply return the text hello world world yeah w-o-r-l-d okay something like that all right now the the only other gotcha here is um if we want to run this script directly without because this is just the development server we need this a little bit of code down here two lines if name just like we have above equals Main underscore underscore Main then we want to run the app with app dot run we're going to pass in the host as 0.0.0.0 and then the port as the default development port for flask which is 5000. now this is this is strictly for development purposes um I'll have another video about how to deploy it into a production environment but this is just allowing us to test it really quick without doing too much infrastructure changes so let's save that and let's run it let's run it and see what happens let's do Python and then Peak dot pi hit enter and it says if we go to our IP address colon 5000 we should be able to access the website so let's do that and unfortunately nothing's happening and I already know that's the case because we have if you're using vulture a firewall running okay so I'm going to control C out of that if we do ufw which is the Ubuntu firewall status oops ufw status you'll see that the only ports that are open right now are the ports for SSH which is Port 22. we have to tell UFO ufw to allow Port 5000 with ufw allow 5000. excuse me so now ufw status we see that Port 22 is open and Port 5000 is open so if we run our flask app again and visit in a web browser we will see Hello World just like we expected that's great and all but let's go ahead and make some actual HTML let's serve some HTML code instead of just plain text so let's control C out of our development server okay and let's make actually you know what let's make a directory called templates and inside that directory let's make a file called index.html and in here I'm just going to write some basic HTML structure so I'm going to have an HTML tag inside of there we'll have the body tag inside of there we'll have a header one element and this is going to say let's go on a hike okay you can do whatever you want this is just an example we'll close out all of our tags body and then HTML so this is some pretty basic HTML but it's going to show us let's go on a hike in big bold text and actually I just noticed these should both be header one elements okay so let's save that and now let's in our peak.pi file let's tell it to serve that template so let's open that back up and instead of returning hello world let's return render template which we're going to import in a second that index.html file so we also we imported flask before we also have to import render template okay so it's a function that comes with the PIP package that we installed with the flask package so it's going to render the index.html file so now if we save that and run I can use the up Arrow key to run that flask app again hit enter we're still accessible at this IP address colon 5000 if we refresh the page we'll see that we are now serving HTML let's go on a hike okay so that is a static HTML website let me kind of show you an introduction to passing variables into our template so I'm going to open this back up Ctrl C out of the development server in in our template index.html file let's add another line here let's make a paragraph element and we're going to use the variable syntax inside of this template which is open curly open curly and then the name of a variable which we will Define inside of peak.pi so let's do mountain and then close curly close curly and then close the paragraph element so basically we're going to Define a variable called Mountain inside of our peak.pi file and we're going to pass it in via the render template let's do that now so we'll save this file open up peak.pi and instead of just rendering the template template and passing in the index.html file we're also going to pass in that variable called mountain and let's call it Everest okay so this is going to be defined inside of our template so instead of seeing those curly brackets we should see a new line with Everest so let's try it out let's save that start up our development server with python.peak.pi refresh the page and indeed we see a new line with Everest now one mountain is cool but multiple mountains are even cooler so let's go ahead and make a for Loop to Loop over multiple mountains so let's first Define oops let's first Define our mountains inside of peak.pi so we can do that in a list variable so let's do mountains equal let's say Everest uh what do we got K2 and Kilimanjaro okay i l i m Kila Min Charo did I spell that right get a lot of crap for not spelling that right killer Manjaro okay um and now instead of passing in just one mountain like we did before let's pass in all of the mountains Okay so the mountain variable inside of the template will now be a list of these three mountains so over in our template let's go ahead and instead of just doing a paragraph element here let's actually oops instead of doing a paragraph element here let's go ahead and make an unordered list which is just bullet point so we'll Define that with UL we'll open up our UL tag here and then we'll close it down here and in between there we'll add our list items so kind of like we did before with the curly bracket curly bracket to access the variable we can do something similar curling bracket percent sign for a for Loop so four each mountain in the mountain variable we want to create we want to print out into the HTML or we want to define the HTML as a list element and then like we did before curly curly to access the variable Mt and then close curly curly close our list item and then finally last line we have an end the for Loop all right so let's pick this apart we have our standard if you if you get rid of all these curlies and percent signs we have a standard unordered list with a list item in it and as we saw before this is the Syntax for accessing a variable which we are defining in each iteration of our for Loop so Mountain has average K2 and Kilimanjaro and then that's going to execute three times the first time it's going to be Everest Kilimanjaro and then K2 that makes sense let's try it out let's save that execute python peak.pi our development server is running let's refresh the page and just like we expected we see that bulleted list with Everest K2 and Kilimanjaro okay I know what you're saying I spelled Kilimanjaro wrong I I see that now let me fix that quick and then after I do fix that let's um make a multi-page website which is actually pretty easy to do so what we're going to do let's start out start back in the template file so template index.html instead of just printing out a list item well we're gonna and and just the the value in there we're gonna actually make it a link to a page that's specific for each one of the mountains so you can link with the a tag in HTML so a href equals slash Mountain which is uh our new page m-o-u-n-t-a-i-n and then the name of the mountain itself kind of like we just did before and then the text that you're going to see okay so this is the link that's the link and then the text that you're going to see is the mountain itself just like that and then we'll close the a tag so thinking back to what standard HTML looks like this is simply just a link that goes to Mountain slash some mountains name and the text for the link is going to be the name of the mountain that looks good let's save that and that over in uh peak.pi we have to make just like we have a page for the index here we have to make another page for the mountains and we don't have to make an individual page for the mountain like each Mountain we don't have to page forever sk2 and Kilimanjaro we just have to make a generic Mountain page which is going to be a template for all of the mountains so we'll do app.root and like we specified in the index it's going to be slash Mountain slash Mt okay so we'll explain the syntax in a bit let me it'll make sense once we write it out and then we're going to define the mountain function and that's actually taking that argument of mountains so let me let me finish it like I said I was going to do return this is okay so basically what do we got going on here we have a a root for our app that is existing at slash mountain and then this is basically a way to define a variable called Mt in these bracket or in these uh less than greater than signs and then we're passing that variable into our Mountain function and we are printing it out just like we did in the first hello world example simple we don't need a template just we're going to print it out this is Everest this is Kilimanjaro this is K2 so that's all we should need for a multi-page website in flask so let's save that run our develop run our development server with python peak.pi and when we refresh the page these should all turn into links like it does here and now when we click on each one of these links we should go to this URL slash Mountain slash the name of the the mountain and that happens the URL slash mountain Everest this is Everest same thing for K2 slash Mountain K2 this is K2 and Kilimanjaro there we go now the last thing I want to point out here is this big warning this is a development server do not use it in production deployment the next video here is going to show you exactly how to take what we did today and put it into production deployment I'll see you guys over there subscribe thank you for watching thank you"
  }
]